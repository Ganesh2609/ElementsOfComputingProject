
class Game {
   
   field int speed;
   
   field Bird bird;
   field Pipe pipe1;
   field Pipe pipe2;
   field Pipe pipe3;
   field Score score;
   
   field char key;      
   field char last_key;
   field boolean first_jump;
   field boolean exit;
   field boolean reset;
   field boolean quit;
   field int collision;
   
   field int frames1;
   

   constructor Game new(int d) {
      let speed = d;
      
      let bird = Bird.new(128, 128);
      do Pipe.create(2, 50);
      let pipe1 = Pipe.new(614+((560/3)*0), 128);
      let pipe2 = Pipe.new(614+((560/3)*1), 128);
      let pipe3 = Pipe.new(614+((560/3)*2), 128);
      let score = Score.new();
         
        return this;
   }

method void gamestart(){
 do Output.moveCursor(0,0);
            do Output.printString("Use < and > arrows to increase or decrease flapping of bird");
            do Output.println();
            do Output.printString("PRESS R TO RESET");
            do Output.println();
            do Output.printString("PRESS Q TO QUIT");
            do Output.println();
            do Output.printString("PRESS SPACEBAR TO PLAY");
return;
}


   method void dispose() {
      // dispose of (deallocate) objects
      do bird.dispose();
      do pipe1.dispose();
      do pipe2.dispose();
      do pipe3.dispose();
      do score.dispose();
      do Memory.deAlloc(this);
      return;
   }

  
   method void inputs() {
      let key = Keyboard.keyPressed();
      
      if (key = 81) { 
         let exit = true; 
         let quit = true;
      }
      if (key = 82) { 
         let exit = true; 
         let reset = true;
      }
      if ((key = 32) & (~(last_key=32))) { 
         do bird.jump();
         if (first_jump) {
            
            let first_jump = false;
            
            do LCGRandom.setSeed(frames1);
	 do Output.moveCursor(0,0);
	 do Output.printString("                                                           ");
	 do Output.moveCursor(1,0);
	 do Output.printString("                                                   ");
	 do Output.moveCursor(2,0);
	 do Output.printString("                                                   ");
	 do Output.moveCursor(3,0);
	 do Output.printString("                                                   ");
	 do Output.moveCursor(4,0);
	 do Output.printString("                                                   ");
	 do Output.moveCursor(5,0);
	 do Output.printString("                                                   ");
	 do Output.moveCursor(10, 20);
	 do Output.printString("                                                   ");
	 

         }
      } else {
        
         if (((key = 130) & (~(last_key=130))) & (speed > 0)) { let speed = speed - 1; }   

         if ((key = 132) & (~(last_key=132))) { let speed = speed + 1; }   // right arrow
      }
      
      let last_key = key;
      return;
   }

 
   method void handle_pipe(int collision) {
      if (collision=2) { // Collision
         let exit = true;
      } else {
         if (collision=1) { // Passing by
            do score.increment();
         }
      }
      return;
   }

  
   method void refresh() {
      
      do bird.update();  
   
      if ((~first_jump)) { 
      
         do pipe1.update();
         do pipe2.update();
         do pipe3.update();
       
         do score.show();
	 
         do handle_pipe(pipe1.gameover(bird.xP(),bird.yP()));
         do handle_pipe(pipe2.gameover(bird.xP(),bird.yP()));
         do handle_pipe(pipe3.gameover(bird.xP(),bird.yP()));
       
      }
      return;
   }


   method void framecount() {
         let frames1 = frames1 + 1;
         if (frames1 < 0) { 
            let frames1 = 0;          
         }
	return;
   }


   method boolean run() {

      let key = 0;
      let last_key = 0;
      let first_jump = true;
      let exit = false;
      let reset = false;
      let quit = false;
      let frames1 = 0;


     do Output.moveCursor(10, 20);
     do Output.printString(" G E T   R E A D Y ");


      while (~exit) {

         do inputs();
         do refresh();

         do framecount();
         do Sys.wait(speed);
      }
      if ((~quit)) { 
         do Output.moveCursor(10, 20);
     do Output.printString(" G A M E  O V E R ");
      }
     
      while ((~reset)) {
         let key = Keyboard.keyPressed();
         if (key = 81) { 
            return false;
         }
         if (key = 82) { 
            let reset = true;
         }
      } 
      do reset();  
      return true;
   }


   method void reset() {
      do Screen.clearScreen();
      do bird.setbird(8, 128);
      do pipe1.setpipe(614+((560/3)*0), 128);
      do pipe2.setpipe(614+((560/3)*1), 128);
      do pipe3.setpipe(614+((560/3)*2), 128);
      do score.reset();
      return;
   }
}